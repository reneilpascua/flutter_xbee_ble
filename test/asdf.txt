use counter (total 16B)
12B nonce + 4B of numbers (initial is 00 00 00 01)

----------------------------------------------------------
relayed 'hello world!!!!!!' (length 17)

as int list: (length 23)
[48, 79, 84, 48, 156, 191, 36, 119, 26, 122, 76, 14, 226, 147, 206, 253, 179, 8, 199, 102, 129, 144, 132]

as hex digits: (length 46)
304f54309cbf24771a7a4c0ee293cefdb308c766819084

decrypted as plaintext (length 23):
~
note: it appeared like that in the console because its code units were messed up. see below

decrypted as code units (length 23):
[126, 0, 19, 65533, 2, 104, 101, 108, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33, 33, 33, 33, 33, 33, 46]
note: 65533 is huge (0xfffd) ... not sure what's going on there. anyways, the encrypted message is in positions 5 to N-2 (position N-1 is the checksum)

decrypted code units as hex digits:
7e 00 13 fffd 02 68 65 6c 6c 6f 20 77 6f 72 6c 64 21 21 21 21 21 21 2e
0  1  2  3    4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22

offset 0 (7e) is start delimiter
offset 1 (00 13) is 2 bytes that represent length (0x0013 = 19) before the checksum
offset 3 (fffd ??) is a byte that says the frame type (according to the checksum it's supposed to be AD)
                        --> this is a user data relay output frame!!!
offset 4 (02) is source interface. 2 means micropython
offset 5 onward, not including eof, is the data
eof is checksum

----------------------------------------------------------
relayed 'hello!!' (length 7)

decrypted code units as int list: (length 13)
[126, 0, 9, 65533, 2, 104, 101, 108, 108, 111, 33, 33, 65533]

decrypted as hex digits:
7e 00 09 fffd 02 68 65 6c 6c 6f 21 21 fffd